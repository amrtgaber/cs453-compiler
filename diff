diff -r 882230631128 code.c
--- a/code.c	Thu Nov 11 15:45:44 2010 -0700
+++ b/code.c	Mon Nov 15 19:42:35 2010 -0700
@@ -190,11 +190,13 @@
 			return "PUSH PARAMETER";
 		case DECLARATION_OP:
 			return "DECLARATION";
+		case ARRAY_OP:
+			return "ARRAY INDEXING";
 		case WHILE_OP:
 			return "WHILE";
 		case RETURN_OP:
 			return "RETURN";
 		default:
-			return "MISSING/UNRECOGNIZED OPCODE";
+			return "MISSING/UNRECOGNIZED";
 	}
 }
\ No newline at end of file
diff -r 882230631128 code.h
--- a/code.h	Thu Nov 11 15:45:44 2010 -0700
+++ b/code.h	Mon Nov 15 19:42:35 2010 -0700
@@ -46,6 +46,7 @@
 	LEAVE,
 	PUSH_PARAM,
 	DECLARATION_OP,
+	ARRAY_OP,
 	WHILE_OP,
 	RETURN_OP
 } Opcode;
diff -r 882230631128 parser.yacc
--- a/parser.yacc	Thu Nov 11 15:45:44 2010 -0700
+++ b/parser.yacc	Mon Nov 15 19:42:35 2010 -0700
@@ -50,7 +50,8 @@
 		_generateCode = TRUE,
 		_errorMessage[255],
 		_tempID[15],				// up to 10 billion temps > unsigned int max
-		_labelID[16];				// up to 10 billion labels > unsigned int max
+		_labelID[16],				// up to 10 billion labels > unsigned int max
+		_t0[4] = { '$', 't', '0', '\0' };	// register string "$t0"
 unsigned int	_tempNum = 0,
 				_labelNum = 0,
 				_stackSize = 0;
@@ -455,20 +456,23 @@
 			  else
 				  printf("_%s:\n", _currFID);
 			
-			  _stackSize = 8;
+			  _stackSize = 16;
 			  _stackSize += allocateStackSpace($8, 0);
 
 			  printf("\tsubu\t$sp, $sp, %d\n", _stackSize);
 			  printf("\tsw\t$ra, %d($sp)\n", _stackSize - 4);
 			  printf("\tsw\t$fp, %d($sp)\n", _stackSize - 8);
+			  printf("\tsw\t$t0, %d($sp)\n", _stackSize - 12);
+  			  printf("\tsw\t$t1, %d($sp)\n", _stackSize - 16);
 			  printf("\taddu\t$fp, $sp, %d\n", _stackSize);
 			  
 			  SyntaxTree *parameter = $5;
 			  SyntaxTree *parameterName = $5;
 			  int i, j, k, l;
 			  i = j = k = l = 0;
-			  for(i = 12, j = 0; parameter; i += 4, j += 4) {
+			  for(i = 20, j = 0; parameter; i += 4, j += 4) {
 					
+					// this 'if' is just to get the parameter names in order
 					l = 0;
 					parameterName = $5;
 				    if (k == 0 && parameterName == parameter) {
@@ -496,19 +500,11 @@
 					parameter = parameter->left;
 			  }
 			  
-			  declarations = $8;
 			  if (i <= _stackSize) {
 			  	  printf("\t# initializing local variables\n");
-			  	  
-				  while(i <= _stackSize) {
-					  if (declarations->symbol->type == CHAR_TYPE)
-				 	  	  printf("\tsb\t$0, %d($sp)\n", _stackSize - i);
-					  else
-						  printf("\tsw\t$0, %d($sp)\n", _stackSize - i);
-					  
-					  declarations = declarations->left;
-					  i += 4;
-				  }
+			
+				  for( ; i <= _stackSize; i += 4)
+					  printf("\tsw\t$0, %d($sp)\n", _stackSize - i);  	  
 			  }
 
 			  Code *code = constructCode(function);
@@ -521,8 +517,10 @@
 			  #endif
 			
 			  printf("\n_%sReturn:\n", _currFID);
+			  printf("\tlw\t$t1, %d($sp)\n", _stackSize - 16);
+  			  printf("\tlw\t$t0, %d($sp)\n", _stackSize - 12);
+			  printf("\tlw\t$fp, %d($sp)\n", _stackSize - 8);
 			  printf("\tlw\t$ra, %d($sp)\n", _stackSize - 4);
-			  printf("\tlw\t$fp, %d($sp)\n", _stackSize - 8);
 			  printf("\taddu\t$sp, $sp, %d\n", _stackSize);
 			  printf("\tjr\t$ra\n");
 
@@ -800,7 +798,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, $1.type);
-			  $$.tree = createTree(ADD, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(ADD, newSymbol, $3.tree, $1.tree);
 			}
 			| expr '-' expr
 			{
@@ -812,7 +810,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, $1.type);
-			  $$.tree = createTree(SUB, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(SUB, newSymbol, $3.tree, $1.tree);
 			}
 			| expr '*' expr
 			{
@@ -824,7 +822,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, $1.type);
-			  $$.tree = createTree(MULT, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(MULT, newSymbol, $3.tree, $1.tree);
 			}
 			| expr '/' expr
 			{
@@ -836,7 +834,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, $1.type);
-			  $$.tree = createTree(DIV, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(DIV, newSymbol, $3.tree, $1.tree);
 			}
 			| expr DBLEQ expr
 			{
@@ -848,7 +846,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(EQUAL, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(EQUAL, newSymbol, $3.tree, $1.tree);
 			}
 			| expr NOTEQ expr
 			{
@@ -860,7 +858,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(NOT_EQUAL, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(NOT_EQUAL, newSymbol, $3.tree, $1.tree);
 			}
 			| expr LTEQ expr
 			{
@@ -872,7 +870,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(LESS_EQUAL, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(LESS_EQUAL, newSymbol, $3.tree, $1.tree);
 			}
 			| expr '<' expr
 			{
@@ -884,7 +882,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(LESS_THAN, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(LESS_THAN, newSymbol, $3.tree, $1.tree);
 			}
 			| expr GTEQ expr
 			{
@@ -896,7 +894,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(GREATER_EQUAL, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(GREATER_EQUAL, newSymbol, $3.tree, $1.tree);
 			}
 			| expr '>' expr
 			{
@@ -908,7 +906,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(GREATER_THAN, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(GREATER_THAN, newSymbol, $3.tree, $1.tree);
 			}
 			| expr LOGICAND expr
 			{
@@ -919,7 +917,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(AND, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(AND, newSymbol, $3.tree, $1.tree);
 			}
 			| expr LOGICOR expr
 			{
@@ -930,7 +928,7 @@
 			
 			  generateNewTempID();
 			  Symbol *newSymbol = insert(_tempID, BOOLEAN);
-			  $$.tree = createTree(OR, newSymbol, $1.tree, $3.tree);
+			  $$.tree = createTree(OR, newSymbol, $3.tree, $1.tree);
 			}
 			| ID
 			{
@@ -1008,8 +1006,10 @@
 			          typeError(_errorMessage);
 			      }
 				  $$.type = currSymbol->type;
+				  $$.tree = createTree(FUNCTION_CALL, currSymbol, NULL, NULL);
 			  } else {
 				  $$.type = UNKNOWN;
+				  $$.tree = NULL;
 			  }
 			}
 			| '('
@@ -1036,9 +1036,23 @@
 				  	  typeError(_errorMessage);
 			  	  }
 			  	  $$.type = (recallGlobal(_callStack->identifier))->type;
+				
+				  SyntaxTree *tree = $4;
+
+				  if (tree) {
+					  while (tree->left)
+						  tree = tree->left;
+
+				  	  tree->left = $3;
+				      $$.tree = createTree(FUNCTION_CALL, recallGlobal(_callStack->identifier), $4, NULL);
+				  } else {
+					  $$.tree = createTree(FUNCTION_CALL, recallGlobal(_callStack->identifier), $3, NULL);
+				  }
+				
 			      popFunctionCall();
 			  } else {
 			      $$.type = UNKNOWN;
+				  $$.tree = NULL;
 			  }
 			  
 			}
@@ -1059,15 +1073,17 @@
 			  expr ']'
 			{
 			  if ($3.type != INT_TYPE && $3.type != CHAR_TYPE) {
-				  sprintf(_errorMessage, "ARRAY index for %s must be INT or CHAR",
+				  sprintf(_errorMessage, "array index for %s must be INT or CHAR",
 					  _currID);
 			  	  typeError(_errorMessage);
 			  }
 			
 			  if (!_callStack) {
 				  $$.type = UNKNOWN;
+				  $$.tree = NULL;
 			  } else {
 				  $$.type = (recall(_callStack->identifier))->type;
+				  $$.tree = createTree(ARRAY, recall(_callStack->identifier), $3.tree, NULL);
 					
 				  if ($$.type == CHAR_ARRAY)
 					  $$.type = CHAR_TYPE;
@@ -1091,6 +1107,7 @@
 				  $$.tree = createTree(SYMBOL, currSymbol, NULL, NULL);
 			  } else {
 				  $$.type = UNKNOWN;
+				  $$.tree = NULL;
 			  }
 			}
 			;
@@ -1110,12 +1127,10 @@
 			  	          typeError("type mismatch in arguments to function");
 						  $$ = NULL;
 					  } else {
-						  $$ = $1.tree;
-						  $$->operation = PARAMETER_TREE;
+						  $$ = createTree(PARAMETER, NULL, NULL, $1.tree);
 					  }
 				  } else {
-					  $$ = $1.tree;
-					  $$->operation = PARAMETER_TREE;
+					  $$ = createTree(PARAMETER, NULL, NULL, $1.tree);
 				  }
 			  } else {
 				  $$ = NULL;
@@ -1327,6 +1342,8 @@
 	switch (tree->operation) {
 		case ADD:
 			tree->code = createCode(ADD_OP, tree->left->symbol, tree->right->symbol, tree->symbol);
+			tree->symbol->location = _t0;
+
 			break;
 	 	case SUB:
 			tree->code = createCode(SUB_OP, tree->left->symbol, tree->right->symbol, tree->symbol);
@@ -1367,6 +1384,8 @@
 		case OR:
 			tree->code = createCode(OR_OP, tree->left->symbol, tree->right->symbol, tree->symbol);
 			break;
+		case ARRAY:
+			break;
 		/*case IF_TREE:
 			break;
 		case WHILE_TREE:
@@ -1408,11 +1427,24 @@
 				tree->code = createCode(ENTER, tree->symbol, NULL, NULL);
 			}
 			break;
-		case PARAMETER_TREE:
-			tree->code = createCode(PUSH_PARAM, tree->symbol, NULL, NULL);
+		case PARAMETER:
+			Code *code = tree->right->code;
+			
+			if (code) {
+				tree->code = code;
+				while (code->next)
+					code = code->next;
+				
+				code->next = createCode(PUSH_PARAM, tree->right->symbol, NULL, NULL);
+				code = code->next;
+			} else {
+				code = createCode(PUSH_PARAM, tree->right->symbol, NULL, NULL);
+				tree->code = code;
+			}
 			
 			if (tree->left)
-				tree->code->next = tree->left->code;
+				code->next = tree->left->code;
+			
 			break;
 		case DECLARATION:
 			tree->code = createCode(DECLARATION_OP, tree->symbol, NULL, NULL);
@@ -1422,6 +1454,8 @@
 			break;
 		case SYMBOL:
 			break;
+		case LITERAL:
+			break;
 		case FUNCTION_ROOT:
 			if (tree->left && tree->left->code) {
 				tree->code = tree->left->code;
@@ -1458,8 +1492,40 @@
 	switch (code->opcode) {
 		case ADD_OP:
 			/*if (code->source1->location) {
+					
 				if (code->source2->location) {
-					printf("\t*/
+					printf("\t# %s + %s\n", code->source1->identifier, code->source2->identifier);
+					if (code->source2->type == CHAR_TYPE)
+						printf"\tlb\t$t1, %s\n", code->source2->location);
+					else
+						printf("\tlw\t$t1, %s\n", code->source2->location);
+					
+					if (code->source1->type == CHAR_TYPE)
+						printf"\tlb\t$t0, %s\n", code->source1->location);
+					else
+						printf("\tlw\t$t0, %s\n", code->source1->location);
+					
+					printf("\tadd\t$t0, $t0, $t1\n");
+				} else {
+					if (code->source2->type == CHAR_TYPE) {
+						if (code->source2->value.charVal == '\n') {
+							printf("\t# %s + '\\n'\n", code->source1->identifier);
+							printf("\tli\t$t0, 10		# 10 is ascii value for '\\n'\n");
+						} else if (code->source1->value.charVal == '\0') {
+							printf("\t# %s + '\\0'\n", code->source1->identifier);
+							printf("\tli\t$t0, 0		# 0 is ascii value for '\\0'\n");
+						} else {
+							printf("\t# %s + '%c'\n", code->source1->identifier, code->source2->value.charVal);
+							printf("\tli\t$t0, '%c'\n", code->source1->value.charVal);
+						}
+						printf"\tlb\t$t1, %s\n", code->source2->location);
+					} else {
+						printf("\tlw\t$t1, %s\n", code->source2->location);
+					}
+					
+					printf("\tadd\t$t0, $t0, $t1\n");
+				}
+*/
 			break;
 		case SUB_OP:
 			break;
@@ -1538,10 +1604,15 @@
 						printf("\t# %s = '%c'\n", code->destination->identifier, code->source1->value.charVal);
 						printf("\tli\t$t0, '%c'\n", code->source1->value.charVal);
 					}
-					printf("\tsb\t$t0, %s\n", code->destination->location);
+					
+					if (code->destination->type == CHAR_TYPE)
+						printf("\tsb\t$t0, %s\n", code->destination->location);
+					else
+						printf("\tsw\t$t0, %s\n", code->destination->location);
 				} else if (code->source1->type == INT_TYPE) {
 					printf("\t# %s = %d\n", code->destination->identifier, code->source1->value.intVal);
 					printf("\tli\t$t0, %d\n", code->source1->value.intVal);
+					
 					if (code->destination->type == CHAR_TYPE)
 						printf("\tsb\t$t0, %s\n", code->destination->location);
 					else
@@ -1600,17 +1671,17 @@
 						printf("\t# pushing parameter '\\n'\n", code->source1->value.charVal);
 						printf("\tsubu\t$sp, $sp, 4\n");
 						printf("\tli\t$t0, 10\n", code->source1->value.charVal);
-						printf("\tsb\t$t0, 0($sp)\n");
+						printf("\tsw\t$t0, 0($sp)\n");
 					} else if (code->source1->value.charVal == '\0') {
 						printf("\t# pushing parameter '\\0'\n", code->source1->value.charVal);
 						printf("\tsubu\t$sp, $sp, 4\n");
 						printf("\tli\t$t0, 0\n", code->source1->value.charVal);
-						printf("\tsb\t$t0, 0($sp)\n");
+						printf("\tsw\t$t0, 0($sp)\n");
 					} else {
 						printf("\t# pushing parameter '%c'\n", code->source1->value.charVal);
 						printf("\tsubu\t$sp, $sp, 4\n");
 						printf("\tli\t$t0, '%c'\n", code->source1->value.charVal);
-						printf("\tsb\t$t0, 0($sp)\n");
+						printf("\tsw\t$t0, 0($sp)\n");
 					}
 				} else {
 					printf("\t# pushing parameter %d\n", code->source1->value.intVal);
diff -r 882230631128 symbolTable.c
--- a/symbolTable.c	Thu Nov 11 15:45:44 2010 -0700
+++ b/symbolTable.c	Mon Nov 15 19:42:35 2010 -0700
@@ -315,7 +315,7 @@
 	if (type == UNKNOWN)
 		return "UNKNOWN";
 	
-	return "MISSING/UNRECOGNIZED TYPE";
+	return "MISSING/UNRECOGNIZED";
 }
 
 /* Function: functionTypeAsString
@@ -336,7 +336,7 @@
 	if (functionType == F_UNKNOWN)
 		return "UNKNOWN";
 	
-	return "MISSING/UNRECOGNIZED FUNCTION TYPE";
+	return "MISSING/UNRECOGNIZED";
 }
 
 /* Function: printParamList
diff -r 882230631128 syntaxTree.c
--- a/syntaxTree.c	Thu Nov 11 15:45:44 2010 -0700
+++ b/syntaxTree.c	Mon Nov 15 19:42:35 2010 -0700
@@ -28,7 +28,7 @@
 	newTree->code = NULL;
 	newTree->left = left;
 	newTree->right = right;
-	newTree->elseOpt = NULL;
+	newTree->opt = NULL;
 	
 	return newTree;
 }
@@ -45,7 +45,7 @@
 	
 	destroyTree(tree->left);
 	destroyTree(tree->right);
-	destroyTree(tree->elseOpt);
+	destroyTree(tree->opt);
 	
 	free(tree);
 }
@@ -168,7 +168,11 @@
 			return "RETURN_TREE";
 		case SYMBOL:
 			return "SYMBOL";
-		case PARAMETER_TREE:
+		case LITERAL:
+			return "LITERAL";
+		case ARRAY:
+			return "ARRAY INDEXING";
+		case PARAMETER:
 			return "PARAMETER";
 		case DECLARATION:
 			return "DECLARATION";
@@ -179,6 +183,6 @@
 		case FUNCTION_CALL:
 			return "FUNCTION_CALL";
 		default:
-			return "MISSING/UNRECOGNIZED TREE OPERATOR";
+			return "MISSING/UNRECOGNIZED";
 	}
 }
\ No newline at end of file
diff -r 882230631128 syntaxTree.h
--- a/syntaxTree.h	Thu Nov 11 15:45:44 2010 -0700
+++ b/syntaxTree.h	Mon Nov 15 19:42:35 2010 -0700
@@ -40,8 +40,10 @@
 	WHILE_TREE,
 	RETURN_TREE,
 	SYMBOL,
+	LITERAL,
+	ARRAY,
 	DECLARATION,
-	PARAMETER_TREE,
+	PARAMETER,
 	STATEMENT,
 	FUNCTION_ROOT,
 	FUNCTION_CALL
@@ -54,7 +56,7 @@
 	Operator 	operation;
 	Symbol		*symbol;
 	Code 		*code;
-	struct SyntaxTree *left, *right, *elseOpt;
+	struct SyntaxTree *left, *right, *opt;
 } SyntaxTree;
 
 /************************
diff -r 882230631128 test.c--
--- a/test.c--	Thu Nov 11 15:45:44 2010 -0700
+++ b/test.c--	Mon Nov 15 19:42:35 2010 -0700
@@ -1,9 +1,11 @@
 extern void print_int(int n);
 extern void print_string(char s[]);
 
-void printX(int x), printA(int a), make10(int n), make5(int n, char a, int b, char c[]),
+void printX(int x), printA(int a), make10(int n), make5(int n),
 		takeIntArray(int n[]), takeCharArray(char c[]), onlyLocals(void),
-		onlyParameters(int param1, char param2, int param3[], char param4[]);
+		onlyParameters(int param1, char param2, int param3[], char param4[]),
+		parametersAndLocals(char p1, int p2, char p3[], int p4[]),
+		noVariables(void);
 
 int x, a, int1, int2, int3, int4, intArray1[5], int5, intArray2[10], intArray3[100];
 char char1, char2, char3, charArray1[26], char4, char5, charArray2[255];
@@ -30,7 +32,19 @@
 	takeCharArray(charArray2);
 	onlyLocals();
 	onlyParameters(int1, char1, intArray1, charArray1);
+	parametersAndLocals('a', 1, charArray1, intArray1);
+	noVariables();
 	
+	x = 1 + 2 + 3;
+}
+
+void noVariables(void) {
+
+}
+
+void parametersAndLocals(char p1, int p2, char p3[], int p4[]) {
+	int local1, local2;
+	char local3, local4;
 }
 
 void onlyLocals(void) {
@@ -51,17 +65,15 @@
 }
 
 void make10(int n) {
-	make5(3, '\n', int3, charArray2);
-	make5(50, '%', int3, charArray2);
+	make5(3);
+	make5(50);
 	print_string("making 10...\n");
 	n = 10;
 	x = 10;
 	return;
 }
 
-void make5(int n, char a, int b, char c[]) {
-	int local1, local2;
-	char local3, local4;
+void make5(int n) {
 	print_string("making 5...\n");
 	print_string("n = ");
 	print_int(n);
@@ -80,46 +92,4 @@
 	print_string("a = ");
 	print_int(a);
 	print_string("\n");
-}
-
-/*extern char permutation(char string[]);
-
-char permutationFound;
-
-int factorial(int num) {
-	if (num == 1)
-		return 1;
-	return num * factorial(num - 1);
-}
-
-int length(char string[]) {
-	char a;
-	int length;
-	
-	a = string[0];
-	length = 0;
-
-	while (a != '\0') {
-		length = length + 1;
-		a = string[length];
-	}
-	
-	return length;
-}
-
-void permute(char string[]) {
-	int i, permutations, length;
-	
-	length = length(string);
-	
-	permutations = factorial(length);
-	
-	for( i = 0; i < permutations; i = i + 1) {
-		if (permutation(string) == 'T') {
-			permutationFound = 1;
-			return;
-		} else {
-			permutationFound = 0;
-		}
-	}
-}*/
\ No newline at end of file
+}
\ No newline at end of file
diff -r 882230631128 test.s
--- a/test.s	Thu Nov 11 15:45:44 2010 -0700
+++ b/test.s	Mon Nov 15 19:42:35 2010 -0700
@@ -1,594 +0,0 @@
-.data
-
-_x:
-	.word 0
-_intArray3:
-	.space 400
-_intArray2:
-	.space 40
-_int5:
-	.word 0
-_intArray1:
-	.space 20
-_int4:
-	.word 0
-_int3:
-	.word 0
-_int2:
-	.word 0
-_int1:
-	.word 0
-_a:
-	.word 0
-
-.data
-
-_char1:
-	.byte 0
-_charArray2:
-	.space 255
-_char5:
-	.byte 0
-_char4:
-	.byte 0
-_charArray1:
-	.space 26
-_char3:
-	.byte 0
-_char2:
-	.byte 0
-
-
-.text
-
-main:
-	subu	$sp, $sp, 8
-	sw	$ra, 4($sp)
-	sw	$fp, 0($sp)
-	addu	$fp, $sp, 8
-
-	# char1 = #
-	li	$t0, '#'
-	sb	$t0, _char1
-
-	# char2 = '\n'
-	li	$t0, 10		# 10 is ascii value for '\n'
-	sb	$t0, _char2
-
-	# char3 = '\0'
-	li	$t0, 0		# 0 is ascii value for '\0'
-	sb	$t0, _char3
-
-	# x = 5
-	li	$t0, 5
-	sw	$t0, _x
-
-	# pushing parameter x
-	lw	$t0, _x
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling printX
-	jal	_printX
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# a = 42
-	li	$t0, 42
-	sw	$t0, _a
-
-	# pushing parameter a
-	lw	$t0, _a
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling printA
-	jal	_printA
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# x = a
-	lw	$t0, _a
-	sw	$t0, _x
-
-	# pushing parameter x
-	lw	$t0, _x
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling printX
-	jal	_printX
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter a
-	lw	$t0, _a
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling printA
-	jal	_printA
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter 100
-	subu	$sp, $sp, 4
-	li	$t0, 100
-	sw	$t0, 0($sp)
-
-	# calling print_int
-	jal	_print_int
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter _temp6
-	la	$t0, __temp6
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter x
-	lw	$t0, _x
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling make10
-	jal	_make10
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter x
-	lw	$t0, _x
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling printX
-	jal	_printX
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter intArray3
-	la	$t0, _intArray3
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling takeIntArray
-	jal	_takeIntArray
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter charArray2
-	la	$t0, _charArray2
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling takeCharArray
-	jal	_takeCharArray
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# calling onlyLocals
-	jal	_onlyLocals
-
-	# pushing parameter charArray1
-	la	$t0, _charArray1
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter intArray1
-	la	$t0, _intArray1
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter char1
-	lb	$t0, _char1
-	subu	$sp, $sp, 4
-	sb	$t0, 0($sp)
-
-	# pushing parameter int1
-	lw	$t0, _int1
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling onlyParameters
-	jal	_onlyParameters
-
-	# popping pushed parameters
-	addu	$sp, $sp, 16
-
-_mainReturn:
-	lw	$ra, 4($sp)
-	lw	$fp, 0($sp)
-	addu	$sp, $sp, 8
-	jr	$ra
-
-.text
-
-_onlyLocals:
-	subu	$sp, $sp, 24
-	sw	$ra, 20($sp)
-	sw	$fp, 16($sp)
-	addu	$fp, $sp, 24
-	# initializing local variables
-	sb	$0, 12($sp)
-	sb	$0, 8($sp)
-	sw	$0, 4($sp)
-	sw	$0, 0($sp)
-
-_onlyLocalsReturn:
-	lw	$ra, 20($sp)
-	lw	$fp, 16($sp)
-	addu	$sp, $sp, 24
-	jr	$ra
-
-.text
-
-_onlyParameters:
-	subu	$sp, $sp, 24
-	sw	$ra, 20($sp)
-	sw	$fp, 16($sp)
-	addu	$fp, $sp, 24
-	lw	$t0, 0($fp)		# storing local variable param1
-	sw	$t0, 12($sp)
-	lw	$t0, 4($fp)		# storing local variable param2
-	sw	$t0, 8($sp)
-	lb	$t0, 8($fp)		# storing parameter param3
-	sb	$t0, 4($sp)
-	lw	$t0, 12($fp)		# storing local variable param4
-	sw	$t0, 0($sp)
-
-_onlyParametersReturn:
-	lw	$ra, 20($sp)
-	lw	$fp, 16($sp)
-	addu	$sp, $sp, 24
-	jr	$ra
-
-.text
-
-_takeIntArray:
-	subu	$sp, $sp, 12
-	sw	$ra, 8($sp)
-	sw	$fp, 4($sp)
-	addu	$fp, $sp, 12
-	lw	$t0, 0($fp)		# storing local variable n
-	sw	$t0, 0($sp)
-
-	# return
-	j	_takeIntArrayReturn
-
-_takeIntArrayReturn:
-	lw	$ra, 8($sp)
-	lw	$fp, 4($sp)
-	addu	$sp, $sp, 12
-	jr	$ra
-
-.text
-
-_takeCharArray:
-	subu	$sp, $sp, 12
-	sw	$ra, 8($sp)
-	sw	$fp, 4($sp)
-	addu	$fp, $sp, 12
-	lw	$t0, 0($fp)		# storing local variable c
-	sw	$t0, 0($sp)
-
-_takeCharArrayReturn:
-	lw	$ra, 8($sp)
-	lw	$fp, 4($sp)
-	addu	$sp, $sp, 12
-	jr	$ra
-
-.text
-
-_make10:
-	subu	$sp, $sp, 12
-	sw	$ra, 8($sp)
-	sw	$fp, 4($sp)
-	addu	$fp, $sp, 12
-	lw	$t0, 0($fp)		# storing local variable n
-	sw	$t0, 0($sp)
-
-	# pushing parameter charArray2
-	la	$t0, _charArray2
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter int3
-	lw	$t0, _int3
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter '\n'
-	subu	$sp, $sp, 4
-	li	$t0, 10
-	sb	$t0, 0($sp)
-
-	# pushing parameter 3
-	subu	$sp, $sp, 4
-	li	$t0, 3
-	sw	$t0, 0($sp)
-
-	# calling make5
-	jal	_make5
-
-	# popping pushed parameters
-	addu	$sp, $sp, 16
-
-	# pushing parameter charArray2
-	la	$t0, _charArray2
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter int3
-	lw	$t0, _int3
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# pushing parameter '%'
-	subu	$sp, $sp, 4
-	li	$t0, '%'
-	sb	$t0, 0($sp)
-
-	# pushing parameter 50
-	subu	$sp, $sp, 4
-	li	$t0, 50
-	sw	$t0, 0($sp)
-
-	# calling make5
-	jal	_make5
-
-	# popping pushed parameters
-	addu	$sp, $sp, 16
-
-	# pushing parameter _temp11
-	la	$t0, __temp11
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# n = 10
-	li	$t0, 10
-	sw	$t0, 0($sp)
-
-	# x = 10
-	li	$t0, 10
-	sw	$t0, _x
-
-	# return
-	j	_make10Return
-
-_make10Return:
-	lw	$ra, 8($sp)
-	lw	$fp, 4($sp)
-	addu	$sp, $sp, 12
-	jr	$ra
-
-.text
-
-_make5:
-	subu	$sp, $sp, 40
-	sw	$ra, 36($sp)
-	sw	$fp, 32($sp)
-	addu	$fp, $sp, 40
-	lw	$t0, 0($fp)		# storing local variable n
-	sw	$t0, 28($sp)
-	lw	$t0, 4($fp)		# storing local variable a
-	sw	$t0, 24($sp)
-	lb	$t0, 8($fp)		# storing parameter b
-	sb	$t0, 20($sp)
-	lw	$t0, 12($fp)		# storing local variable c
-	sw	$t0, 16($sp)
-	# initializing local variables
-	sb	$0, 12($sp)
-	sb	$0, 8($sp)
-	sw	$0, 4($sp)
-	sw	$0, 0($sp)
-
-	# pushing parameter _temp14
-	la	$t0, __temp14
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter _temp15
-	la	$t0, __temp15
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter n
-	lw	$t0, 28($sp)
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_int
-	jal	_print_int
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter _temp6
-	la	$t0, __temp6
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# n = 5
-	li	$t0, 5
-	sw	$t0, 28($sp)
-
-	# x = n
-	lw	$t0, 28($sp)
-	sw	$t0, _x
-
-_make5Return:
-	lw	$ra, 36($sp)
-	lw	$fp, 32($sp)
-	addu	$sp, $sp, 40
-	jr	$ra
-
-.text
-
-_printX:
-	subu	$sp, $sp, 12
-	sw	$ra, 8($sp)
-	sw	$fp, 4($sp)
-	addu	$fp, $sp, 12
-	lw	$t0, 0($fp)		# storing local variable x
-	sw	$t0, 0($sp)
-
-	# pushing parameter _temp17
-	la	$t0, __temp17
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter x
-	lw	$t0, 0($sp)
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_int
-	jal	_print_int
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter _temp6
-	la	$t0, __temp6
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-_printXReturn:
-	lw	$ra, 8($sp)
-	lw	$fp, 4($sp)
-	addu	$sp, $sp, 12
-	jr	$ra
-
-.text
-
-_printA:
-	subu	$sp, $sp, 12
-	sw	$ra, 8($sp)
-	sw	$fp, 4($sp)
-	addu	$fp, $sp, 12
-	lw	$t0, 0($fp)		# storing local variable a
-	sw	$t0, 0($sp)
-
-	# pushing parameter _temp18
-	la	$t0, __temp18
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter a
-	lw	$t0, 0($sp)
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_int
-	jal	_print_int
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-	# pushing parameter _temp6
-	la	$t0, __temp6
-	subu	$sp, $sp, 4
-	sw	$t0, 0($sp)
-
-	# calling print_string
-	jal	_print_string
-
-	# popping pushed parameters
-	addu	$sp, $sp, 4
-
-_printAReturn:
-	lw	$ra, 8($sp)
-	lw	$fp, 4($sp)
-	addu	$sp, $sp, 12
-	jr	$ra
-
-.data
-
-__temp18:
-	.asciiz	"a = "
-
-__temp17:
-	.asciiz	"x = "
-
-__temp15:
-	.asciiz	"n = "
-
-__temp14:
-	.asciiz	"making 5...\n"
-
-__temp11:
-	.asciiz	"making 10...\n"
-
-__temp6:
-	.asciiz	"\n"
-
-.text
-
-_print_int:
-	li	$v0, 1
-	lw	$a0, 0($sp)
-	syscall
-	jr	$ra
-
-_print_string:
-	li	$v0, 4
-	lw	$a0, 0($sp)
-	syscall
-	jr	$ra
