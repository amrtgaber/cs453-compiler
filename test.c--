extern void print_int(int n);
extern void print_string(char s[]);

void printX(int x), printA(int a), make10(int n), make5(int n, char a, int b, char c[]),
		takeIntArray(int n[]), takeCharArray(char c[]), onlyLocals(void),
		onlyParameters(int param1, char param2, int param3[], char param4[]);

int x, a, int1, int2, int3, int4, intArray1[5], int5, intArray2[10], intArray3[100];
char char1, char2, char3, charArray1[26], char4, char5, charArray2[255];

void main(void) {
	char1 = '#';
	char2 = '\n';
	char3 = '\0';
	x = 5;
	printX(x);
	a = 42;
	printA(a);
	x = a;
	printX(x);
	printA(a);

	print_int(100);
	print_string("\n");
	
	make10(x);
	printX(x);
	
	takeIntArray(intArray3);
	takeCharArray(charArray2);
	onlyLocals();
	onlyParameters(int1, char1, intArray1, charArray1);
	
}

void onlyLocals(void) {
	int local1, local2;
	char local3, local4;
}

void onlyParameters(int param1, char param2, int param3[], char param4[]) {
	
}

void takeIntArray(int n[]) {
	return;
}

void takeCharArray(char c[]) {
	
}

void make10(int n) {
	make5(x, char3, int3, charArray2);
	make5(x, char3, int3, charArray2);
	print_string("making 10...\n");
	n = 10;
	x = 10;
	return;
}

void make5(int n, char a, int b, char c[]) {
	int local1, local2;
	char local3, local4;
	print_string("making 5...\n");
	n = 5;
	x = n;
}

void printX(int x) {
	print_string("x = ");
	print_int(x);
	print_string("\n");
}

void printA(int a) {
	print_string("a = ");
	print_int(a);
	print_string("\n");
}

/*extern char permutation(char string[]);

char permutationFound;

int factorial(int num) {
	if (num == 1)
		return 1;
	return num * factorial(num - 1);
}

int length(char string[]) {
	char a;
	int length;
	
	a = string[0];
	length = 0;

	while (a != '\0') {
		length = length + 1;
		a = string[length];
	}
	
	return length;
}

void permute(char string[]) {
	int i, permutations, length;
	
	length = length(string);
	
	permutations = factorial(length);
	
	for( i = 0; i < permutations; i = i + 1) {
		if (permutation(string) == 'T') {
			permutationFound = 1;
			return;
		} else {
			permutationFound = 0;
		}
	}
}*/